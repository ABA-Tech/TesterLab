@model TesterLab.Domain.Models.TestCase
@{
    ViewData["Title"] = "Détails du scénario";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 text-dark mb-0">@Model.Name</h1>
            <p class="text-muted">Détails du scénario de test</p>
        </div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard")">Accueil</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "TestCases")">Scénarios</a></li>
                <li class="breadcrumb-item active">@Model.Name</li>
            </ol>
        </nav>
    </div>

    <!-- Actions principales -->
    <div class="card mb-4">
        <div class="card-body py-2">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex gap-2 flex-wrap">
                    <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning btn-sm">
                        Modifier
                    </a>
                    <a href="@Url.Action("Steps", new { id = Model.Id })" class="btn btn-primary btn-sm">
                        Étapes (@(Model.TestSteps?.Count ?? 0))
                    </a>
                    <a href="@Url.Action("Duplicate", new { id = Model.Id })" class="btn btn-outline-secondary btn-sm">
                        Dupliquer
                    </a>
                    <button type="button" class="btn btn-success btn-sm" onclick="runSingleTest(@Model.Id)">
                        Exécuter
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Plus
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="exportTestCase(@Model.Id)">Exporter</a></li>
                            <li><a class="dropdown-item" href="#" onclick="shareTestCase(@Model.Id)">Partager</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger" href="@Url.Action("Delete", new { id = Model.Id })">Supprimer</a></li>
                        </ul>
                    </div>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <span class="badge bg-@(Model.Active ? "success" : "secondary")">
                        @(Model.Active ? "Actif" : "Inactif")
                    </span>
                    <span class="badge bg-@(Model.CriticalityLevel >= 4 ? "danger" : Model.CriticalityLevel >= 3 ? "warning" : "info")">
                        Criticité @Model.CriticalityLevel
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <!-- Informations générales -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Informations générales</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="info-group">
                                <label class="info-label">Fonctionnalité</label>
                                <div class="info-value">
                                    <a href="@Url.Action("Details", "Features", new { id = Model.Feature?.Id })" class="text-decoration-none">
                                        @Model.Feature?.Name
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-group">
                                <label class="info-label">Criticité</label>
                                <div class="info-value">
                                    <span class="badge bg-@(Model.CriticalityLevel >= 4 ? "danger" : Model.CriticalityLevel >= 3 ? "warning" : "info")">
                                        @switch (Model.CriticalityLevel)
                                        {
                                            case 5:
                                                <text>Critique</text>
                                                break;
                                            case 4:
                                                <text>Important</text>
                                                break;
                                            case 3:
                                                <text>Normal</text>
                                                break;
                                            case 2:
                                                <text>Mineur</text>
                                                break;
                                            case 1:
                                                <text>Optionnel</text>
                                                break;
                                        }
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-group">
                                <label class="info-label">Fréquence</label>
                                <div class="info-value">
                                    @switch (Model.ExecutionFrequency)
                                    {
                                        case "Manual":
                                            <text>Manuel</text>
                                            break;
                                        case "Daily":
                                            <text>Quotidien</text>
                                            break;
                                        case "Weekly":
                                            <text>Hebdomadaire</text>
                                            break;
                                        case "OnDemand":
                                            <text>À la demande</text>
                                            break;
                                        default:
                                            <text>@Model.ExecutionFrequency</text>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="info-group">
                                <label class="info-label">Durée estimée</label>
                                <div class="info-value">@Model.EstimatedMinutes minutes</div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.UserPersona))
                        {
                            <div class="col-md-6">
                                <div class="info-group">
                                    <label class="info-label">Type d'utilisateur</label>
                                    <div class="info-value">
                                        @switch (Model.UserPersona)
                                        {
                                            case "Client":
                                                <text>Client</text>
                                                break;
                                            case "Admin":
                                                <text>Administrateur</text>
                                                break;
                                            case "Guest":
                                                <text>Visiteur</text>
                                                break;
                                            case "Premium":
                                                <text>Premium</text>
                                                break;
                                            default:
                                                <text>@Model.UserPersona</text>
                                                break;
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Tags))
                        {
                            <div class="col-12">
                                <div class="info-group">
                                    <label class="info-label">Tags</label>
                                    <div class="info-value">
                                        @foreach (var tag in Model.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            <span class="badge bg-secondary me-1">@tag.Trim()</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <div class="col-12">
                                <div class="info-group">
                                    <label class="info-label">Description</label>
                                    <div class="info-value">
                                        <div class="p-3 bg-light rounded">
                                            @Model.Description
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Étapes du test -->
            @if (Model.TestSteps != null && Model.TestSteps.Any())
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Étapes du test (@Model.TestSteps.Count())</h5>
                        <a href="@Url.Action("Steps", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">
                            Modifier les étapes
                        </a>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush">
                            @foreach (var step in Model.TestSteps.OrderBy(s => s.Order))
                            {
                                <div class="list-group-item">
                                    <div class="d-flex">
                                        <div class="step-number me-3">
                                            <span class="badge bg-primary">@step.Order</span>
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div>
                                                    <h6 class="mb-1">
                                                        @switch (step.Action?.ToLower())
                                                        {
                                                            case "navigate":
                                                                <text>Naviguer vers</text>
                                                                break;
                                                            case "click":
                                                                <text>Cliquer sur</text>
                                                                break;
                                                            case "type":
                                                                <text>Saisir</text>
                                                                break;
                                                            case "assert":
                                                                <text>Vérifier</text>
                                                                break;
                                                            case "wait":
                                                                <text>Attendre</text>
                                                                break;
                                                            default:
                                                                <text>@step.Action</text>
                                                                break;
                                                        }
                                                    </h6>
                                                    @if (!string.IsNullOrEmpty(step.Description))
                                                    {
                                                        <p class="mb-1">@step.Description</p>
                                                    }
                                                    <div class="d-flex gap-3">
                                                        @if (!string.IsNullOrEmpty(step.Target))
                                                        {
                                                            <small class="text-muted">Cible: @step.Target</small>
                                                        }
                                                        @if (!string.IsNullOrEmpty(step.Value))
                                                        {
                                                            <small class="text-muted">Valeur: @step.Value</small>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="text-end">
                                                    @if (step.IsOptional)
                                                    {
                                                        <span class="badge bg-info">Optionnel</span>
                                                    }
                                                    <div class="small text-muted">@step.TimeoutSeconds s</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-body text-center py-5">
                        <h5 class="text-muted">Aucune étape définie</h5>
                        <p class="text-muted">Ce scénario n'a pas encore d'étapes.</p>
                        <a href="@Url.Action("Steps", new { id = Model.Id })" class="btn btn-primary">
                            Ajouter des étapes
                        </a>
                    </div>
                </div>
            }
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Statistiques -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">Statistiques</h6>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="h4 text-primary mb-0">@(Model.TestSteps?.Count ?? 0)</div>
                            <small class="text-muted">Étapes</small>
                        </div>
                        <div class="col-6">
                            <div class="h4 text-success mb-0">@Model.EstimatedMinutes</div>
                            <small class="text-muted">Minutes</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions rapides -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">Actions rapides</h6>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success" onclick="runSingleTest(@Model.Id)">
                            Exécuter maintenant
                        </button>
                        <button type="button" class="btn btn-success" onclick="executionTest(@Model.Id)">
                            Exécuter --
                        </button>
                        <button type="button" class="btn btn-outline-primary" onclick="scheduleTest(@Model.Id)">
                            Programmer
                        </button>
                        <button type="button" class="btn btn-outline-info" onclick="validateTest(@Model.Id)">
                            Valider
                        </button>
                    </div>
                </div>
            </div>

            <!-- Historique -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">Historique</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <div class="fw-bold">Création</div>
                                <small class="text-muted">@Model.CreatedAt.ToString("dd/MM/yyyy à HH:mm")</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Dernières exécutions -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">Dernières exécutions</h6>
                </div>
                <div class="card-body">
                    <div id="recentExecutions">
                        <div class="text-center py-3">
                            <p class="text-muted mb-0">Aucune exécution récente</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de planification -->
<div class="modal fade" id="scheduleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Programmer l'exécution</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="scheduleForm">
                    <div class="mb-3">
                        <label class="form-label">Date et heure</label>
                        <input type="datetime-local" class="form-control" id="scheduleDateTime" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Environnement</label>
                        <select class="form-select" id="scheduleEnvironment" required>
                            <option value="">Sélectionner un environnement</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Données de test (optionnel)</label>
                        <select class="form-select" id="scheduleTestData">
                            <option value="">Aucune</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="confirmSchedule()">
                    Programmer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de d'exécution' -->
<div class="modal fade" id="executionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Démarrer l'exécution</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="executionForm">
                    <div class="mb-3">
                        <label class="form-label">Environnement</label>
                        <select class="form-select" id="EnvironmentId" required>
                            <option value="">Sélectionner un environnement</option>
                            @foreach(var env in ViewBag.Environment)
                            {
                                <option value="@env.Id">@env.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Données de test (optionnel)</label>
                        <select class="form-select" id="TestDataId">
                            <option value="">Aucune</option>
                            @foreach (var env in ViewBag.TestData)
                            {
                                <option value="@env.Id">@env.Name</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="confirmExecution()">
                    Démarrer
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .info-group {
        margin-bottom: 1rem;
    }

    .info-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.25rem;
        font-size: 0.9rem;
    }

    .info-value {
        color: #212529;
    }

    .step-number .badge {
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
    }

    .timeline {
        position: relative;
        padding-left: 1.5rem;
    }

        .timeline::before {
            content: '';
            position: absolute;
            left: 0.5rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }

    .timeline-item {
        position: relative;
        margin-bottom: 1rem;
    }

    .timeline-marker {
        position: absolute;
        left: -1.5rem;
        top: 0.25rem;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 2px solid #fff;
    }

    .timeline-content {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 0.375rem;
        border-left: 3px solid #dee2e6;
    }

    .card {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .list-group-item {
        border: none;
        border-bottom: 1px solid #dee2e6;
    }

        .list-group-item:last-child {
            border-bottom: none;
        }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }

    .execution-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 6px;
        margin-bottom: 0.5rem;
    }
</style>

<script>
    function runSingleTest(testCaseId) {
        showNotification('Exécution du test démarrée...', 'info');

        setTimeout(() => {
            showNotification('Test exécuté avec succès !', 'success');
            loadRecentExecutions(testCaseId);
        }, 3000);
    }

    function scheduleTest(testCaseId) {
        loadEnvironmentsAndTestData();

        const now = new Date();
        const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
        document.getElementById('scheduleDateTime').min = now.toISOString().slice(0, 16);
        document.getElementById('scheduleDateTime').value = tomorrow.toISOString().slice(0, 16);

        new bootstrap.Modal(document.getElementById('scheduleModal')).show();
    }

    function executionTest(testCaseId) {
        loadEnvironmentsAndTestData();

        new bootstrap.Modal(document.getElementById('executionModal')).show();
    }

    function validateTest(testCaseId) {
        showNotification('Validation des étapes en cours...', 'info');

        setTimeout(() => {
            const issues = Math.random() > 0.7 ? Math.floor(Math.random() * 3) : 0;

            if (issues === 0) {
                showNotification('Toutes les étapes sont valides !', 'success');
            } else {
                showNotification(`${issues} problème(s) détecté(s) dans les étapes`, 'warning');
            }
        }, 2000);
    }

    function confirmSchedule() {
        const datetime = document.getElementById('scheduleDateTime').value;
        const environment = document.getElementById('scheduleEnvironment').value;

        if (!datetime || !environment) {
            showNotification('Veuillez remplir tous les champs obligatoires', 'error');
            return;
        }

        showNotification('Test programmé avec succès !', 'success');
        bootstrap.Modal.getInstance(document.getElementById('scheduleModal')).hide();
    }

    // function confirmExecution() {
    //     const environment = document.getElementById('scheduleEnvironment').value;

    //     if (!datetime || !environment) {
    //         showNotification('Veuillez remplir tous les champs obligatoires', 'error');
    //         return;
    //     }

    //     showNotification('Test programmé avec succès !', 'success');
    //     bootstrap.Modal.getInstance(document.getElementById('scheduleModal')).hide();
    // }
    function confirmExecution() {
        const environmentId = document.getElementById("EnvironmentId").value;
        const testDataId = document.getElementById("TestDataId").value || null;

        if (!environmentId) {
            alert("Veuillez sélectionner un environnement.");
            return;
        }
        console.log(@Model.Id)
 
        const formData = new FormData();
        formData.append("testCaseId", @Model.Id);
        formData.append("environmentId", environmentId);
        if (testDataId) formData.append("testDataId", testDataId);

        console.log(formData)
        console.log(environmentId)
        console.log(testDataId)
        fetch('/TestCases/ExecuteTestCase', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.redirected) {
                    showNotification('Test programmé avec succès !', 'success');
                    window.location.href = response.url; // redirection côté client
                } else {
                    showNotification(response.text(), 'error');
                    return response.text(); // gestion d'erreur
                }
            })
            .catch(error => console.error('Erreur AJAX :', error));

        bootstrap.Modal.getInstance(document.getElementById('executionModal')).hide();
    }

    function loadEnvironmentsAndTestData() {
        const envSelect = document.getElementById('scheduleEnvironment');
        const testDataSelect = document.getElementById('scheduleTestData');

        envSelect.innerHTML = `
                <option value="">Sélectionner un environnement</option>
                <option value="1">Production</option>
                <option value="2">Staging</option>
                <option value="3">Développement</option>
            `;

        testDataSelect.innerHTML = `
                <option value="">Aucune</option>
                <option value="1">Utilisateur Test</option>
                <option value="2">Utilisateur Premium</option>
                <option value="3">Données Admin</option>
            `;
    }

    function loadRecentExecutions(testCaseId) {
        const container = document.getElementById('recentExecutions');

        const executions = [
            { status: 'success', date: 'Il y a 5 min', duration: '1m 23s' },
            { status: 'failed', date: 'Il y a 2h', duration: '45s' },
            { status: 'success', date: 'Hier 14:30', duration: '1m 45s' }
        ];

        let html = '';
        executions.forEach(exec => {
            const statusClass = exec.status === 'success' ? 'success' : 'danger';
            const statusText = exec.status === 'success' ? 'Réussi' : 'Échec';

            html += `
                    <div class="execution-item">
                        <div>
                            <div class="small">${exec.date}</div>
                            <div class="text-muted" style="font-size: 0.75rem;">${exec.duration}</div>
                        </div>
                        <span class="badge bg-${statusClass}">${statusText}</span>
                    </div>
                `;
        });

        container.innerHTML = html;
    }

    function exportTestCase(testCaseId) {
        showNotification('Export en cours...', 'info');

        setTimeout(() => {
            showNotification('Test case exporté avec succès !', 'success');
        }, 1500);
    }

    function shareTestCase(testCaseId) {
        const url = window.location.href;
        navigator.clipboard.writeText(url).then(() => {
            showNotification('Lien copié dans le presse-papier !', 'success');
        });
    }

    function showNotification(message, type = 'info') {
        const colors = {
            success: '#198754',
            error: '#dc3545',
            warning: '#fd7e14',
            info: '#0d6efd'
        };

        const notification = document.createElement('div');
        notification.className = 'alert alert-dismissible fade show position-fixed';
        notification.style.cssText = `
                top: 20px;
                right: 20px;
                z-index: 1100;
                min-width: 300px;
                background-color: ${colors[type]};
                color: white;
                border: none;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            `;

        notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"></button>
            `;

        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 4000);
    }

    document.addEventListener('DOMContentLoaded', function () {
        const testCaseId = @(Model?.Id ?? 0);
        if (testCaseId > 0 && document.getElementById('recentExecutions')) {
            loadRecentExecutions(testCaseId);
        }
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
