@model AspnetCoreMvcFull.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid mt-4">
    <!-- Messages de feedback -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- En-tête -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0"><i class="bi bi-speedometer2 me-2"></i>Dashboard</h2>
        <form method="get" class="d-flex gap-2">
            <select name="applicationId" class="form-select form-select-sm" style="width: auto;" onchange="this.form.submit()">
                <option value="">Toutes les applications</option>
                @foreach (var app in Model.Applications)
                {
                    <option value="@app.Id" selected="@(Model.SelectedApplicationId == app.Id)">@app.Name</option>
                }
            </select>
            <select name="days" class="form-select form-select-sm" style="width: auto;" onchange="this.form.submit()">
                <option value="7" selected="@(Model.SelectedDays == 7)">Derniers 7 jours</option>
                <option value="30" selected="@(Model.SelectedDays == 30)">Derniers 30 jours</option>
                <option value="90" selected="@(Model.SelectedDays == 90)">Derniers 90 jours</option>
            </select>
        </form>
    </div>

    <!-- Cartes de métriques principales -->
    <div class="row g-3 mb-4">
        <!-- Taux de réussite -->
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <p class="text-muted mb-1 small">Taux de réussite</p>
                            <h3 class="mb-0 text-success fw-bold">@Model.SuccessRate%</h3>
                            @if (Model.SuccessRateTrend > 0)
                            {
                                <small class="text-success"><i class="bi bi-arrow-up"></i> +@Model.SuccessRateTrend%</small>
                            }
                            else if (Model.SuccessRateTrend < 0)
                            {
                                <small class="text-danger"><i class="bi bi-arrow-down"></i> @Model.SuccessRateTrend%</small>
                            }
                            else
                            {
                                <small class="text-muted">Stable</small>
                            }
                        </div>
                        <div class="bg-success bg-opacity-10 p-3 rounded">
                            <i class="bi bi-check-circle text-success fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tests exécutés -->
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <p class="text-muted mb-1 small">Tests exécutés</p>
                            <h3 class="mb-0 fw-bold">@Model.TotalTestsExecuted</h3>
                            <small class="text-muted">Cette période</small>
                        </div>
                        <div class="bg-primary bg-opacity-10 p-3 rounded">
                            <i class="bi bi-play-circle text-primary fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tests échoués -->
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <p class="text-muted mb-1 small">Tests échoués</p>
                            <h3 class="mb-0 text-danger fw-bold">@Model.FailedTests</h3>
                            @if (Model.FailedTestsTrend < 0)
                            {
                                <small class="text-success"><i class="bi bi-arrow-down"></i> @Model.FailedTestsTrend</small>
                            }
                            else if (Model.FailedTestsTrend > 0)
                            {
                                <small class="text-danger"><i class="bi bi-arrow-up"></i> +@Model.FailedTestsTrend</small>
                            }
                            else
                            {
                                <small class="text-muted">Aucun changement</small>
                            }
                        </div>
                        <div class="bg-danger bg-opacity-10 p-3 rounded">
                            <i class="bi bi-x-circle text-danger fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Durée moyenne -->
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <p class="text-muted mb-1 small">Durée moyenne</p>
                            <h3 class="mb-0 fw-bold">@Model.FormatDuration(Model.AverageDurationSeconds)</h3>
                            @if (Model.DurationTrend < 0)
                            {
                                <small class="text-success"><i class="bi bi-arrow-down"></i> @Model.DurationTrend s</small>
                            }
                            else if (Model.DurationTrend > 0)
                            {
                                <small class="text-danger"><i class="bi bi-arrow-up"></i> +@Model.DurationTrend s</small>
                            }
                            else
                            {
                                <small class="text-muted">Stable</small>
                            }
                        </div>
                        <div class="bg-info bg-opacity-10 p-3 rounded">
                            <i class="bi bi-stopwatch text-info fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <!-- Exécutions récentes -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Exécutions récentes</h5>
                </div>
                @if (Model.RecentTestRuns.Any())
                {
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Nom</th>
                                        <th>Application</th>
                                        <th>Statut</th>
                                        <th>Progression</th>
                                        <th>Résultats</th>
                                        <th>Date</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var run in Model.RecentTestRuns)
                                    {
                                        var totalTests = run.PassedCount + run.FailedCount + run.SkippedCount;
                                        <tr>
                                            <td>
                                                <i class="bi @Model.GetStatusIcon(run.Status) me-1"></i>
                                                @run.Name
                                            </td>
                                            <td><span class="badge bg-light text-dark">@run.Application?.Name</span></td>
                                            <td><span class="badge @Model.GetStatusBadgeClass(run.Status)">@run.Status</span></td>
                                            <td>
                                                <div class="progress" style="height: 8px; width: 100px;">
                                                    <div class="progress-bar @(run.Status == "Failed" ? "bg-danger" : "bg-primary")" 
                                                         style="width: @run.ProgressPercentage%"></div>
                                                </div>
                                                <small class="text-muted">@run.ProgressPercentage%</small>
                                            </td>
                                            <td>
                                                @if (run.PassedCount > 0)
                                                {
                                                    <small class="text-success">@run.PassedCount ✓</small>
                                                }
                                                @if (run.FailedCount > 0)
                                                {
                                                    <small class="text-danger">@run.FailedCount ✗</small>
                                                }
                                                @if (run.SkippedCount > 0)
                                                {
                                                    <small class="text-warning">@run.SkippedCount ⊘</small>
                                                }
                                                @if (totalTests > 0)
                                                {
                                                    <small class="text-muted">/ @totalTests</small>
                                                }
                                            </td>
                                            <td><small>@Model.GetRelativeTime(run.CreatedAt)</small></td>
                                            <td>
                                                @if (run.Status == "Failed")
                                                {
                                                    <form asp-action="RetryTest" method="post" class="d-inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="testRunId" value="@run.Id" />
                                                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Relancer">
                                                            <i class="bi bi-arrow-clockwise"></i>
                                                        </button>
                                                    </form>
                                                }
                                                else
                                                {
                                                    <a href="#" class="btn btn-sm btn-outline-secondary">
                                                        <i class="bi bi-eye"></i>
                                                    </a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card-body text-center py-5">
                        <i class="bi bi-inbox fs-1 text-muted"></i>
                        <p class="text-muted mt-2">Aucune exécution récente</p>
                    </div>
                }
            </div>
        </div>

        <!-- Statistiques et alertes -->
        <div class="col-lg-4">
            <!-- Stats par application -->
            <div class="card border-0 shadow-sm mb-3">
                <div class="card-header bg-white border-bottom">
                    <h5 class="mb-0"><i class="bi bi-bar-chart me-2"></i>Applications</h5>
                </div>
                <div class="card-body">
                    @if (Model.ApplicationStats.Any())
                    {
                        @foreach (var stat in Model.ApplicationStats)
                        {
                            var badgeClass = stat.SuccessRate >= 90 ? "bg-success" : 
                                           stat.SuccessRate >= 70 ? "bg-warning text-dark" : "bg-danger";
                            var progressClass = stat.SuccessRate >= 90 ? "bg-success" : 
                                              stat.SuccessRate >= 70 ? "bg-warning" : "bg-danger";
                            
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="fw-semibold">@stat.ApplicationName</span>
                                    <span class="badge @badgeClass">@Math.Round(stat.SuccessRate, 0)%</span>
                                </div>
                                <div class="progress" style="height: 8px;">
                                    <div class="progress-bar @progressClass" style="width: @stat.SuccessRate%"></div>
                                </div>
                                <small class="text-muted">@stat.TotalTests tests exécutés</small>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">Aucune donnée disponible</p>
                    }
                </div>
            </div>

            <!-- Alertes critiques -->
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <h5 class="mb-0 text-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>Alertes
                        @if (Model.CriticalFailures.Any())
                        {
                            <span class="badge bg-danger ms-2">@Model.CriticalFailures.Count</span>
                        }
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.CriticalFailures.Any())
                    {
                        @foreach (var failure in Model.CriticalFailures)
                        {
                            <div class="alert alert-danger border-0 shadow-sm mb-2">
                                <div class="d-flex align-items-start">
                                    <i class="bi bi-x-circle-fill me-2 mt-1"></i>
                                    <div class="flex-grow-1">
                                        <strong>@failure.TestCaseName</strong>
                                        <p class="mb-1 small text-truncate" style="max-width: 200px;">@failure.ErrorMessage</p>
                                        <small class="text-muted">
                                            @failure.ApplicationName • @Model.GetRelativeTime(failure.FailedAt)
                                            <span class="badge bg-danger ms-1">Niveau @failure.CriticalityLevel</span>
                                        </small>
                                    </div>
                                    <form asp-action="RetryTest" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="testRunId" value="@failure.TestRunId" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger ms-2">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-success border-0 shadow-sm mb-0">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            <strong>Aucune alerte critique</strong>
                            <p class="mb-0 small">Tous les tests critiques sont au vert !</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Graphique d'évolution -->
    <div class="row g-3 mt-2">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <h5 class="mb-0"><i class="bi bi-graph-up me-2"></i>Évolution sur @Model.SelectedDays jours</h5>
                </div>
                <div class="card-body">
                    @if (Model.EvolutionData.Any())
                    {
                        {
                            // Calculer le maximum pour la normalisation des barres
                            var maxTests = Model.EvolutionData.Max(d => d.TotalTests);
                            // AspnetCoreMvcFull.Controllers.DailyStats.SetMaxTests(maxTests);
                        }
                        <div class="d-flex justify-content-around text-center">
                            @foreach (var day in Model.EvolutionData)
                            {
                                <div>
                                    <small class="text-muted d-block">@day.DayName</small>
                                    <div style="height: 100px;" class="d-flex align-items-end justify-content-center">
                                        <div style="width: 30px; height: @day.BarHeight%; background: @day.BarColor;" 
                                             class="rounded-top" 
                                             data-bs-toggle="tooltip" 
                                             title="@day.TotalTests tests - @day.PassedTests réussis - @day.FailedTests échoués"></div>
                                    </div>
                                    <small class="fw-bold">@day.TotalTests</small>
                                </div>
                            }
                        </div>
                        <div class="text-center mt-3">
                            <span class="badge bg-success me-2">● Réussi</span>
                            <span class="badge bg-danger me-2">● Échoué</span>
                            <span class="badge bg-warning text-dark">● Mixte</span>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-5">Aucune donnée pour cette période</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s, box-shadow 0.2s;
    }
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    .progress {
        background-color: #e9ecef;
    }
    .table tbody tr {
        transition: background-color 0.2s;
    }
    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }
    .alert {
        font-size: 0.9rem;
    }
</style>

@section Scripts {
    <script>
        // Initialiser les tooltips Bootstrap
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Auto-dismiss alerts après 5 secondes
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert-dismissible');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
}
