// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesterLab.Infrastructure.Data;

#nullable disable

namespace TesterLab.Infrastructure.Migrations
{
    [DbContext(typeof(TesterLabDbContext))]
    partial class TesterLabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("TesterLab.Domain.Models.ActionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActionTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Navigation",
                            Description = "Naviguer vers une page",
                            Example = "Aller à /login",
                            Icon = "🏠",
                            Name = "Aller à la page"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Interaction",
                            Description = "Cliquer sur un élément",
                            Example = "Cliquer sur le bouton Se connecter",
                            Icon = "👆",
                            Name = "Cliquer sur"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Form",
                            Description = "Remplir un champ",
                            Example = "Saisir l'email dans le champ Email",
                            Icon = "⌨️",
                            Name = "Saisir du texte"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Validation",
                            Description = "Valider un résultat",
                            Example = "Vérifier que le message Bienvenue s'affiche",
                            Icon = "✅",
                            Name = "Vérifier que"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Wait",
                            Description = "Attendre un délai",
                            Example = "Attendre 3 secondes",
                            Icon = "⏱️",
                            Name = "Attendre"
                        });
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MainUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessInfo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresAuth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Active")
                        .HasDatabaseName("IX_Environment_ApplicationId_Active");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.ExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestCaseExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestRunId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseExecutionId");

                    b.HasIndex("TestRunId");

                    b.ToTable("ExecutionLogs");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusinessPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Complexity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.PerformanceMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestCaseExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestRunId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseExecutionId");

                    b.HasIndex("TestRunId");

                    b.ToTable("PerformanceMetrics");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestCaseExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestRunId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestStepExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseExecutionId");

                    b.HasIndex("TestRunId");

                    b.HasIndex("TestStepExecutionId");

                    b.ToTable("Screenshots");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CriticalityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecutionFrequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPersona")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId", "Active");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCaseExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorStackTrace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedSteps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassedSteps")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestCaseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TestRunId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestRunId");

                    b.ToTable("TestCaseExecutions");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpecificEnvironmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SpecificEnvironmentId");

                    b.ToTable("TestDataSets");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageDurationMs")
                        .HasColumnType("REAL");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailedResults")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecutionLogs")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Headless")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PassedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Screenshots")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkippedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("SuccessRate")
                        .HasColumnType("REAL");

                    b.Property<string>("TargetIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("TestDataId");

                    b.HasIndex("ApplicationId", "Status");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Selector")
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestSteps");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestStepExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScreenshotPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Selector")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StepOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestCaseExecutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseExecutionId");

                    b.HasIndex("TestStepId");

                    b.ToTable("TestStepExecutions");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Environment", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.Application", "Application")
                        .WithMany("Environments")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.ExecutionLog", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCaseExecution", "TestCaseExecution")
                        .WithMany()
                        .HasForeignKey("TestCaseExecutionId");

                    b.HasOne("TesterLab.Domain.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCaseExecution");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Feature", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.Application", "Application")
                        .WithMany("Features")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.PerformanceMetric", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCaseExecution", "TestCaseExecution")
                        .WithMany()
                        .HasForeignKey("TestCaseExecutionId");

                    b.HasOne("TesterLab.Domain.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCaseExecution");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Screenshot", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCaseExecution", "TestCaseExecution")
                        .WithMany()
                        .HasForeignKey("TestCaseExecutionId");

                    b.HasOne("TesterLab.Domain.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.TestStepExecution", "TestStepExecution")
                        .WithMany()
                        .HasForeignKey("TestStepExecutionId");

                    b.Navigation("TestCaseExecution");

                    b.Navigation("TestRun");

                    b.Navigation("TestStepExecution");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCase", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.Feature", "Feature")
                        .WithMany("TestCases")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCaseExecution", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestData", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.Application", "Application")
                        .WithMany("TestDataSets")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.Environment", "SpecificEnvironment")
                        .WithMany()
                        .HasForeignKey("SpecificEnvironmentId");

                    b.Navigation("Application");

                    b.Navigation("SpecificEnvironment");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestRun", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.TestData", "TestData")
                        .WithMany()
                        .HasForeignKey("TestDataId");

                    b.Navigation("Application");

                    b.Navigation("Environment");

                    b.Navigation("TestData");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestStep", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCase", "TestCase")
                        .WithMany("TestSteps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestStepExecution", b =>
                {
                    b.HasOne("TesterLab.Domain.Models.TestCaseExecution", "TestCaseExecution")
                        .WithMany("StepExecutions")
                        .HasForeignKey("TestCaseExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesterLab.Domain.Models.TestStep", "TestStep")
                        .WithMany()
                        .HasForeignKey("TestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCaseExecution");

                    b.Navigation("TestStep");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Application", b =>
                {
                    b.Navigation("Environments");

                    b.Navigation("Features");

                    b.Navigation("TestDataSets");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.Feature", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCase", b =>
                {
                    b.Navigation("TestSteps");
                });

            modelBuilder.Entity("TesterLab.Domain.Models.TestCaseExecution", b =>
                {
                    b.Navigation("StepExecutions");
                });
#pragma warning restore 612, 618
        }
    }
}
